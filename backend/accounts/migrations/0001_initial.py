# Generated by Django 5.2.5 on 2025-08-21 17:07

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Permission',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('code', models.CharField(max_length=100, unique=True)),
                ('description', models.CharField(max_length=255)),
            ],
            options={
                'verbose_name': 'Permission',
                'verbose_name_plural': 'Permissions',
                'db_table': 'permissions',
                'ordering': ('code',),
            },
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('code', models.CharField(max_length=50, unique=True)),
                ('nom', models.CharField(max_length=150)),
            ],
            options={
                'verbose_name': 'Rôle',
                'verbose_name_plural': 'Rôles',
                'db_table': 'roles',
                'ordering': ('code',),
            },
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('code', models.CharField(max_length=50, unique=True)),
                ('nom', models.CharField(max_length=150)),
            ],
            options={
                'verbose_name': 'Service',
                'verbose_name_plural': 'Services',
                'db_table': 'services',
                'ordering': ('code',),
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('prenom', models.CharField(max_length=100)),
                ('nom', models.CharField(max_length=100)),
                ('phone', models.CharField(blank=True, max_length=30, null=True)),
                ('derniere_connexion_le', models.DateTimeField(blank=True, null=True)),
                ('cree_le', models.DateTimeField(auto_now_add=True)),
                ('mis_a_jour_le', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('role', models.ForeignKey(blank=True, db_column='role_id', null=True, on_delete=django.db.models.deletion.SET_NULL, to='accounts.role')),
                ('service', models.ForeignKey(blank=True, db_column='service_id', null=True, on_delete=django.db.models.deletion.SET_NULL, to='accounts.service')),
            ],
            options={
                'verbose_name': 'Utilisateur',
                'verbose_name_plural': 'Utilisateurs',
                'db_table': 'utilisateurs',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='JwtJtiInvalide',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('jti', models.CharField(max_length=255, unique=True)),
                ('invalide_le', models.DateTimeField(auto_now_add=True)),
                ('raison', models.CharField(blank=True, max_length=200, null=True)),
                ('utilisateur', models.ForeignKey(db_column='utilisateur_id', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'JWT invalidé',
                'verbose_name_plural': 'JWT invalidés',
                'db_table': 'jwt_jti_invalide',
                'indexes': [models.Index(fields=['utilisateur'], name='jwt_jti_inv_utilisa_d30aac_idx'), models.Index(fields=['invalide_le'], name='jwt_jti_inv_invalid_500a01_idx')],
            },
        ),
        migrations.CreateModel(
            name='RolePermission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('permission', models.ForeignKey(db_column='permission_id', on_delete=django.db.models.deletion.CASCADE, to='accounts.permission')),
                ('role', models.ForeignKey(db_column='role_id', on_delete=django.db.models.deletion.CASCADE, to='accounts.role')),
            ],
            options={
                'verbose_name': 'Droit d’un rôle',
                'verbose_name_plural': 'Droits des rôles',
                'db_table': 'role_permissions',
                'indexes': [models.Index(fields=['role'], name='role_permis_role_id_0ea48f_idx'), models.Index(fields=['permission'], name='role_permis_permiss_96a6c9_idx')],
                'constraints': [models.UniqueConstraint(fields=('role', 'permission'), name='uq_role_permissions_role_perm')],
            },
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['username'], name='utilisateur_usernam_cddbd8_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['email'], name='utilisateur_email_1cb90f_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['role'], name='utilisateur_role_id_16a3c0_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['service'], name='utilisateur_service_175a33_idx'),
        ),
        migrations.AddConstraint(
            model_name='user',
            constraint=models.UniqueConstraint(fields=('username',), name='uq_utilisateurs_username'),
        ),
        migrations.AddConstraint(
            model_name='user',
            constraint=models.UniqueConstraint(fields=('email',), name='uq_utilisateurs_email'),
        ),
    ]
